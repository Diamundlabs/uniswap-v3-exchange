import { DropDown, Settings } from "@src/assets/icons";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { Noto_Sans } from "next/font/google";

const notoSans = Noto_Sans({
  display: "swap",
  weight: ["400", "600", "700"],
  subsets: ["latin-ext", "latin"],
});
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@src/components/ui/select";
import React, { useEffect, useState } from "react";
import { ethers } from "ethers";
interface ITokens {
  chainId: number;
  address: string;
  name: string;
  symbol: string;
  decimals: number;
  logoURI: string;
}
const Home: NextPage = () => {
  const [token, setToken] = useState<string | undefined>(undefined); 
  const [token2, setToken2] = useState<string | undefined>(undefined);
  const [tokens, setTokens] = useState<ITokens[]>([]);
  const [excahnges, setExchanges] = useState<{ [key: string]: string }>();
  const [amountIn, setAmountIn] = useState<number>(0)
  const [error, setError] = useState<boolean>(false)
  console.log(tokens.length);
  const handleWalletConnect = () => {
    if (window.ethereum) {
    {
        window.ethereum
          .request({ method: 'eth_requestAccounts' })
          .then((res) => {
            setAccount(res[0]);
            setLoading(false);
          })
          .catch((err) => {
            // eslint-disable-next-line
            console.log(err, 'error');
            setLoading(false);
            setError(true);
            setTimeout(() => {
              setError(false);
            }, 3000);
          });
      }    
    } else {
      setLoading(false);
        setError(true);
        setTimeout(() => {
          setError(false);
        }, 3000);
      }
  }
  useEffect(() => {
    const API_URL = "https://gateway.ipfs.io/ipns/tokens.uniswap.org";
    const EXCHANGE_URL = " https://api.coinbase.com/v2/exchange-rates?currency=ETH";
    fetch(EXCHANGE_URL)
    .then(res => res.json())
      .then(ex => { setExchanges(ex.data.rates) })
    fetch(API_URL)
      .then(res => res.json())
      .then(data => {
        console.log(data.tokens.length);
        setTokens([...new Set(data.tokens)] as ITokens[]);
      })
      .catch(err => console.log(err))
  }, [])
  const handleSwap = () => {
    fetch('/api/swap', {
      method: "POST",
      body: {
        amountIn,
        tokenIn,
        tokenOut,
        executerAdress
      }
    })
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`flex min-h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c] ${notoSans.className}`}
      >
        <div className="container flex w-full flex-col items-center justify-between gap-12 px-4 py-12 text-white">
          <nav className="flex w-full items-center justify-end">
            <div className="ml-auto flex flex-row items-center space-x-4">
              <button className="flex flex-row items-center space-x-3 rounded-full bg-secondary-former px-4 py-3">
                <Image
                  src="/eth.png"
                  alt="Ethereum"
                  width={50}
                  height={50}
                  className="h-auto w-5 rounded-full"
                />
                <DropDown className="h-auto w-5" />
              </button>
              <button className="flex flex-row items-center space-x-3 rounded-full bg-secondary-former px-4 py-3 text-xs font-bold">
                Connect Wallet
              </button>
            </div>
          </nav>
          <div className="flex h-full w-full items-center justify-center">
            <div className="my-auto flex h-fit lg:w-5/12 w-10/12 mx-auto flex-col gap-6 rounded-2xl border border-primary-former bg-gradient-to-b from-[#2e026d] to-[#15162c] p-4 backdrop-blur-3xl">
              <span className="flex w-full justify-between">
                <h3 className="text-xl font-bold">Swap</h3>
                <Settings className="h-auto w-5 cursor-pointer" />
              </span>
              <div className="flex flex-col space-y-6">
                <label className="relative flex">
                  <input
                    type="text"
                    placeholder="0.0"
                    className="mt-4 w-full rounded-2xl border border-primary-former bg-tertiary-former py-5 pl-7 pr-12 text-base font-bold text-white focus:outline-none"
                    value={setAmountIn}
                  />
                  <span className="absolute inset-y-0 right-4 my-7">
                    <Select
                      defaultValue={token ?? ""}
                      onValueChange={(value: string) => setToken(value)}
                    >
                      <SelectTrigger className="h-6 w-24">
                        <SelectValue placeholder="Select Token" />
                      </SelectTrigger>
                      <SelectContent className="h-48 w-fit  overflow-y-scroll">
                        <SelectItem value="">
                          <span className="h-6 w-24 text-justify text-[9px]">
                            Select Token
                          </span>
                        </SelectItem>
                        {tokens.map((item, i) => (
                          <SelectItem
                            key={`${item.address}-${i}`}
                            value={item.address}
                            className="w-24"
                          >
                            <div className="flex h-6 w-24 flex-row items-center space-x-3 bg-secondary-former px-4 py-3 text-white">
                              <img
                                src={item.logoURI}
                                alt={item.name}
                                width={25}
                                height={25}
                                className="h-auto w-5 rounded-full"
                              />
                              <span className="text-xs font-semibold">
                                {item.symbol}
                              </span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </span>
                </label>
                <label className="relative flex">
                  <input
                    type="text"
                    placeholder="0.0"
                    className="mt-4 w-full rounded-2xl border border-primary-former bg-tertiary-former py-5 pl-7 pr-12 text-base font-bold text-white focus:outline-none"
                  />
                  <span className="absolute inset-y-0 right-4 my-7">
                    <Select
                      defaultValue={token2 ?? ""}
                      onValueChange={(value: string) => setToken2(value)}
                    >
                      <SelectTrigger className="h-6 w-24">
                        <SelectValue placeholder="Select Token" />
                      </SelectTrigger>
                      <SelectContent className="h-48 w-fit  overflow-y-scroll">
                        <SelectItem value="">
                          <span className="h-6 w-24 text-justify text-[9px]">
                            Select Token
                          </span>
                        </SelectItem>
                        {tokens.map((item, i) => (
                          <SelectItem
                            key={`${item.address}-${i}`}
                            value={item.address}
                            className="w-24"
                          >
                            <div className="flex h-6 w-24 flex-row items-center space-x-3 bg-secondary-former px-4 py-3 text-white">
                              <img
                                src={item.logoURI}
                                alt={item.name}
                                width={25}
                                height={25}
                                className="h-auto w-5 rounded-full"
                              />
                              <span className="text-xs font-semibold">
                                {item.symbol}
                              </span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </span>
                </label>
              </div>
              <button className="mt-3 flex w-full flex-row items-center justify-center space-x-3 rounded-full bg-secondary-former px-4 py-5 text-xs font-bold">
                Connect Wallet
              </button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
