import { DropDown, Settings } from "@src/assets/icons";
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { Alert, Select } from 'antd';
import useSWR from 'swr'
import Link from "next/link";
import { Noto_Sans } from "next/font/google";

const notoSans = Noto_Sans({
  display: "swap",
  weight: ["400", "600", "700"],
  subsets: ["latin-ext", "latin"],
});
import React, { useEffect, useState } from "react";
interface ITokens {
  label: string;
  value: string;
}
const fetchExchanges = async(currency: string) => {
  const res = await fetch(`https://api.coinbase.com/v2/exchange-rates?currency=${currency}`);
  const data = await res.json();
  return data;
}
const Home: NextPage = () => {
  const [token, setToken] = useState<string | undefined>(undefined); 
  const [token2, setToken2] = useState<string | undefined>(undefined);
  const [selectedToken, setSelectedToken] = useState<string | undefined>(undefined);
  const [selectedToken2, setSelectedToken2] = useState<string | undefined>(undefined);
  const [tokens, setTokens] = useState<ITokens[]>([]);
  const [secondTokens, setSecondTokens] = useState<ITokens[]>([]);
  const [exchanges, setExchanges] = useState<{ [key: string]: string }>();
  const [amountIn, setAmountIn] = useState<number>(0)
  const [amountOut, setAmountOut] = useState<number>(0)
  const [error, setError] = useState<boolean>(false)
  const [account, setAccount] = useState<string | undefined>(undefined);
  const [loading, setLoading] = useState<boolean>(false);
  const fetcher = (url: string) => fetch(url).then(res => res.json());
  const { data, isLoading } = useSWR("https://gateway.ipfs.io/ipns/tokens.uniswap.org", fetcher);
  console.log(data);
  const handleWalletConnect = () => {
    const ethereum = (window as any)?.ethereum;
    if (ethereum) {
        ethereum
          .request({ method: 'eth_requestAccounts' })
          .then((res: any) => {
            console.log(res)
            setAccount(res[0]);
            setLoading(false);
          })
          .catch((err: unknown) => {
            // eslint-disable-next-line
            console.log(err, 'error');
            setLoading(false);
            setError(true);
            
          });    
    } else {
      setLoading(false);
      setError(true);
      console.log('error')
      }
  }
  useEffect(() => {
    setTokens([...new Set<ITokens>(data?.tokens?.map((token: any) => ({
      label: token.symbol,
      value: token.address
        })) ?? [])]);
  }, [data])
  const handleSwap = () => {
    fetch('/api/swap', {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        amountIn: amountIn ?? 0,
        tokenIn: token,
        tokenOut: token2,
        executerAdress: account
      })
    })
    .then((res) => res.json())
      .then(console.log)
  };
  const onChange = (value: string) => {
    const values = data?.tokens?.find((token: any) => token.address === value);
    fetchExchanges(values?.symbol).then((res) => {
      setExchanges(res?.data?.rates);
      const availableExchanges = Object.keys(res?.data?.rates);
      setSecondTokens([...new Set<ITokens>(data?.tokens?.filter((token: any) => availableExchanges.includes(token.symbol)).map((token: any) => ({
        label: token.symbol,
        value: token.address
      })) ?? [])]);
    })
    setToken(value);
  };
  const onChange2 = (value: string) => {
    const values = data?.tokens?.find((token: any) => token.address === value);
    setToken2(values?.address)
    setAmountOut((Number(exchanges?.[values?.symbol ?? ''] ?? 0) * amountIn) ?? 0)
    setSelectedToken(values?.symbol)
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`flex min-h-screen flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c] ${notoSans.className}`}
      >
        <div className="container flex w-full flex-col items-center justify-between gap-12 px-4 py-12 text-white relative">
          <nav className="flex w-full items-center justify-end">
            <div className="ml-auto flex flex-row items-center space-x-4">
              <button className="flex flex-row items-center space-x-3 rounded-full bg-secondary-former px-4 py-3">
                <Image
                  src="/eth.png"
                  alt="Ethereum"
                  width={50}
                  height={50}
                  className="h-auto w-5 rounded-full"
                />
                <DropDown className="h-auto w-5" />
              </button>
              {loading
                ?
                <h2>Loading...</h2>
              :
                account ? 
                  <span>{account}</span>
                :
                  <button
                type="button"
                onClick={handleWalletConnect}
                className="flex flex-row items-center space-x-3 rounded-full bg-secondary-former px-4 py-3 text-xs font-bold">
                Connect Wallet
                  </button>
              }
            </div>
          </nav>
          <div className="absolute top-24 z-10 right-2">
            {error && <Alert
      message="Error"
      description="Please have the metamask extension installed to connect your wallet."
      type="error"
      showIcon
            />}
            </div>

          
          <div className="flex h-full w-full items-center justify-center">
            <div className="my-auto flex h-fit lg:w-5/12 w-10/12 mx-auto flex-col gap-6 rounded-2xl border border-primary-former bg-gradient-to-b from-[#2e026d] to-[#15162c] p-4 backdrop-blur-3xl">
              <span className="flex w-full justify-between">
                <h3 className="text-xl font-bold">Swap</h3>
                <Settings className="h-auto w-5 cursor-pointer" />
              </span>
              <div className="flex flex-col space-y-6">
                <div className="relative flex">
                  <input
                    type="number"
                    placeholder="0.0"
                    className="mt-4 w-full appearance-none rounded-2xl border border-primary-former bg-tertiary-former py-5 pl-7 pr-12 text-base font-bold text-white focus:outline-none"
                    value={isNaN(amountIn) ? 0 : amountIn}
                    onChange={(e) => {
                      if (
                        isNaN(
                          parseInt(e.target.value[e.target.value.length - 1] as string)
                          )
                          && e.target.value[e.target.value.length - 1] !== '.'
                      ) {
                        return;
                      } else {
                          setAmountIn(e.target.value as unknown as number)
                        if (exchanges && e.target.value && selectedToken) {
                          setAmountOut((Number(exchanges?.[selectedToken ?? ''] ?? 0) * Number(e.target.value)) ?? 0)
                        }
                      }
                    }}
                  />
                  <span className="absolute inset-y-0 right-4 my-7 z-20">
                    <Select
                      showSearch
                      placeholder="Select a person"
                      optionFilterProp="children"
                      onChange={onChange}
                      options={tokens}
                      style={{ width: 100 }}
                      loading={isLoading}
                      filterOption={(input, option) =>
                        String((option?.label ?? ''))?.toLowerCase().includes(input.toLowerCase())
                        || String((option?.value ?? ''))?.toLowerCase().includes(input.toLowerCase())
                      }
                    />
                    {token && <p className="text-xs text-white absolute  -bottom-12 right-0">{token}</p>}
                  </span>
                </div>
                <div className="relative flex">
                  <input
                    type="text"
                    placeholder="0.0"
                    onChange={(e) => {
                      if (
                        isNaN(
                          parseInt(e.target.value[e.target.value.length - 1] as string)
                        ) && e.target.value[e.target.value.length - 1] !== '.'
                      ) {
                        return;
                      } else {
                        setAmountOut(e.target.value as unknown as number)
                        if (exchanges && e.target.value && selectedToken) {
                          setAmountIn((Number(e.target.value) / Number((exchanges?.[selectedToken ?? ''] ?? 0))) ?? 0)
                        }
                      }
                    }}
                    value={isNaN(amountOut) ? 0 : amountOut}
                    className="mt-4 w-full rounded-2xl border border-primary-former bg-tertiary-former py-5 pl-7 pr-12 text-base font-bold text-white focus:outline-none"
                  />
                  <span className="absolute inset-y-0 right-4 my-7 z-20">
                    <Select
                      showSearch
                      placeholder="Select a person"
                      optionFilterProp="children"
                      onChange={onChange2}
                      options={secondTokens}
                      style={{ width: 100 }}

                      filterOption={(input, option) =>
                        String((option?.label ?? ''))?.toLowerCase().includes(input.toLowerCase())
                        || String((option?.value ?? ''))?.toLowerCase().includes(input.toLowerCase())
                      }
                    />
                    {token2 && <p className="text-xs text-white absolute  -bottom-12 right-0">{token2}</p>}
                  </span>
                </div>
              </div>
              <button
                onClick={handleSwap}
                className="mt-3 flex w-full flex-row items-center justify-center space-x-3 rounded-full bg-secondary-former px-4 py-5 text-xs font-bold"
              >
                Connect Wallet
              </button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
